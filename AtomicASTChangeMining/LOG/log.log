2020-10-28 21:47:55 DEBUG PythonASTUtil:41 - Module(body=[Expr, Import, Import, Import, Import, Import, ImportFrom, Import, Import, Import, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, ImportFrom, Assign, FunctionDef, Expr, ClassDef, FunctionDef, FunctionDef, FunctionDef, FunctionDef, Assign, Assign, FunctionDef, FunctionDef, FunctionDef, FunctionDef],)
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:60 - Import and Alias Names : {np=numpy, constants=rmgpy.constants, MISSING.MISSING=arkane.pdep.PressureDependenceJob}
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Expr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
Arkane common module

2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - "\nArkane common module\n";

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 28
2020-10-28 21:47:55 FATAL PythonASTUtil:108 - Not implemented statement "\nArkane common module\n";
"\nArkane common module\n";

2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import logging;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 44
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import os.path;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 60
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import shutil;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 75
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import string;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 90
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import time;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 103
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import typing.List;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 123
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import numpy;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 137
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import yaml;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 150
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Import
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:101 - -1
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.constants;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 174
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.__version__;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 200
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.exceptions.InputError;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 236
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.molecule.element.get_element;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 279
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.molecule.translator.to_inchi;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 322
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.molecule.translator.to_inchi_key;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 369
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.pdep.collision.SingleExponentialDown;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 420
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.quantity.ScalarQuantity;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 458
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.quantity.ArrayQuantity;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 495
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.rmgobject.RMGObject;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 529
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.species.Species;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 559
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.species.TransitionState;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 597
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.conformer.Conformer;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 640
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.rotation.LinearRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 684
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.rotation.NonlinearRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 731
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.rotation.KRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 770
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.rotation.SphericalTopRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 820
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.torsion.HinderedRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 865
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.torsion.FreeRotor;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 906
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.translation.IdealGasTranslation;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 961
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.statmech.vibration.HarmonicOscillator;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1013
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.thermo.NASA;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1039
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.thermo.Wilhoit;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1068
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.thermo.ThermoData;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1100
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.thermo.NASAPolynomial;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1136
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import rmgpy.transport.TransportData;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1174
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import arkane.modelchem.LevelOfTheory;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1213
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import arkane.modelchem.CompositeLevelOfTheory;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1261
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ImportFrom
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - import arkane.pdep.PressureDependenceJob;

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 1303
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Assign
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - ScalarQuantity
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - ArrayQuantity
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Conformer
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - LinearRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - NonlinearRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - KRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - SphericalTopRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - HinderedRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - FreeRotor
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - IdealGasTranslation
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - HarmonicOscillator
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - TransportData
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - SingleExponentialDown
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Wilhoit
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - NASA
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - NASAPolynomial
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - ThermoData
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - np_array
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - LevelOfTheory
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - CompositeLevelOfTheory
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - ARKANE_CLASS_DICT=Map.of("ScalarQuantity",new ScalarQuantity(),"ArrayQuantity",new ArrayQuantity(),"Conformer",new Conformer(),"LinearRotor",new LinearRotor(),"NonlinearRotor",new NonlinearRotor(),"KRotor",new KRotor(),"SphericalTopRotor",new SphericalTopRotor(),"HinderedRotor",new HinderedRotor(),"FreeRotor",new FreeRotor(),"IdealGasTranslation",new IdealGasTranslation(),"HarmonicOscillator",new statmech.vibration.HarmonicOscillator(),"TransportData",new TransportData(),"SingleExponentialDown",new SingleExponentialDown(),"Wilhoit",new Wilhoit(),"NASA",new NASA(),"NASAPolynomial",new NASAPolynomial(),"ThermoData",new ThermoData(),"np_array",new numpy.array(),"LevelOfTheory",new LevelOfTheory(),"CompositeLevelOfTheory",new CompositeLevelOfTheory());

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 2062
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - tag:yaml.org,2002:str
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - |
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : style
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - tag:yaml.org,2002:str
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void str_repr(){
  if ((len(data.splitlines()) > 1)) {
    return dumper.represent_scalar("tag:yaml.org,2002:str",data,"|");
  }
  return dumper.represent_scalar("tag:yaml.org,2002:str",data);
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 2257
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Expr
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - yaml.add_representer(str,str_repr);

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 2293
2020-10-28 21:47:55 FATAL PythonASTUtil:108 - Not implemented statement yaml.add_representer(str,str_repr);
yaml.add_representer(str,str_repr);

2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - ClassDef
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
    A class for archiving an Arkane species including its statmech data into .yml files
    
2020-10-28 21:47:55 WARN  MapPyStatementsTOJDK:172 - The node is not node added :"\n    A class for archiving an Arkane species including its statmech data into .yml files\n    ";

2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - No species (or TS) or conformer was passed to the ArkaneSpecies object
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - %Y-%m-%d %H:%M
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - {0!r}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - {
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - class
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - {0!r}: {1!r}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - }
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - No species was passed to ArkaneSpecies
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - try-all
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : backend
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : aug_level
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - try-all
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : backend
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : aug_level
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 FATAL MapPyExpressionsJDK:205 - Created any type
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - kcal/mol
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : H298
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - cal/(mol*K)
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : S298
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - K
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : Tdata
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - cal/(mol*K)
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : Cpdata
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - {0:4}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - {0:14.8f}{1:14.8f}{2:14.8f}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 

2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - -_.()<=>+ %s%s
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - .yml
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - w
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : data
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : stream
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Dumping species {0} data as {1}
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Loading statistical mechanics parameters for {0} from {1} file...
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Loading statistical mechanics parameters from {0} file...
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - r
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : stream
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - label
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label "{0}" for this species.
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - label
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Did not find label for species {0} in .yml file.
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Subscript]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - label
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - class
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Can only make objects if the `class` attribute in the dictionary is known
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - ArkaneSpecies
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Expected a ArkaneSpecies object, but got {0}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - class
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - imaginary_frequency
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - imaginary_frequency
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - imaginary_frequency
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - is_ts
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - smiles
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Subscript]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - smiles
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : smiles
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - adjacency_list
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Subscript]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - adjacency_list
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - inchi
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Subscript]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - inchi
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : inchi
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - species
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - label
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : data
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : class_dict
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Attribute]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : data
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : class_dict
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Parsed all YAML objects
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - public class ArkaneSpecies extends RMGObject {
  void __init__(  ArkaneSpecies self){
    super(ArkaneSpecies,self);
    if (((species == None) && (conformer == None))) {
      throw new ValueError("No species (or TS) or conformer was passed to the ArkaneSpecies object");
    }
    if ((conformer != None)) {
      self.conformer=conformer;
    }
    if (((label == None) && (species != None))) {
      self.label=species.label;
    }
 else {
      self.label=label;
    }
    self.author=author;
    self.level_of_theory=level_of_theory;
    self.model_chemistry=model_chemistry;
    self.frequency_scale_factor=frequency_scale_factor;
    self.use_hindered_rotors=use_hindered_rotors;
    self.use_bond_corrections=use_bond_corrections;
    self.atom_energies=atom_energies;
    self.xyz=xyz;
    self.molecular_weight=molecular_weight;
    self.symmetry_number=symmetry_number;
    self.charge=charge;
    self.multiplicity=multiplicity;
    self.is_ts=(is_ts != None) ? is_ts : isinstance(species,TransitionState);
    if (!self.is_ts) {
      self.chemkin_thermo_string=chemkin_thermo_string;
      self.smiles=smiles;
      self.adjacency_list=adjacency_list;
      self.inchi=inchi;
      self.inchi_key=inchi_key;
      self.transport_data=transport_data;
      self.energy_transfer_model=energy_transfer_model;
      self.thermo=thermo;
      self.thermo_data=thermo_data;
      self.formula=formula;
    }
 else {
      self.imaginary_frequency=None;
      self.reaction_label="";
      self.reactants=list();
      self.products=list();
    }
    if ((species != None)) {
      self.update_species_attributes(species);
    }
    self.RMG_version=(RMG_version != None) ? RMG_version : __version__;
    self.datetime=(datetime != None) ? datetime : time.strftime("%Y-%m-%d %H:%M");
  }
  void __repr__(  ArkaneSpecies self){
    PyTypeError result;
    result="{0!r}".format(self.__class__.__name__);
    result/="{";
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError key,    PyTypeError value : self.as_dict().items()) {
      if ((key != "class")) {
        result/="{0!r}: {1!r}".format(str(key),str(value));
      }
    }
    result/="}";
    return result;
  }
  void update_species_attributes(  ArkaneSpecies self){
    PyTypeError s298;
    PyTypeError inchi;
    PyTypeError inchi_key;
    PyTypeError cp;
    PyTypeError h298;
    PyTypeError inchi;
    PyTypeError temperatures;
    PyTypeError inchi_key;
    PyTypeError data;
    if ((species == None)) {
      throw new ValueError("No species was passed to ArkaneSpecies");
    }
    self.label=(self.label || species.label);
    if (isinstance(species,TransitionState)) {
      self.imaginary_frequency=species.frequency;
      if ((species.conformer != None)) {
        self.conformer=species.conformer;
        self.xyz=self.update_xyz_string();
      }
    }
 else     if (((species.molecule != None) && (len(species.molecule) > 0))) {
      self.smiles=species.molecule[0].to_smiles();
      self.adjacency_list=species.molecule[0].to_adjacency_list();
      self.charge=species.molecule[0].get_net_charge();
      self.multiplicity=species.molecule[0].multiplicity;
      self.formula=species.molecule[0].get_formula();
      try {
        inchi=to_inchi(species.molecule[0],"try-all",0);
      }
 catch (      ValueError PyCpatDummy) {
        inchi="";
      }
      try {
        inchi_key=to_inchi_key(species.molecule[0],"try-all",0);
      }
 catch (      ValueError PyCpatDummy) {
        inchi_key="";
      }
      self.inchi=inchi;
      self.inchi_key=inchi_key;
      if ((species.conformer != None)) {
        self.conformer=species.conformer;
        self.xyz=self.update_xyz_string();
      }
      self.molecular_weight=species.molecular_weight;
      if ((species.symmetry_number != -1)) {
        self.symmetry_number=species.symmetry_number;
      }
      if ((species.transport_data != None)) {
        self.transport_data=species.transport_data;
      }
      if ((species.energy_transfer_model != None)) {
        self.energy_transfer_model=species.energy_transfer_model;
      }
      if ((species.thermo != None)) {
        self.thermo=species.thermo.as_dict();
        data=species.get_thermo_data();
        h298=data.get_enthalpy(298) / 4184.0;
        s298=data.get_entropy(298) / 4.184;
        temperatures=numpy.array(new int[]{300,400,500,600,800,1000,1500,2000,2400});
        cp=new Any[]{};
        for (        DummyTerminalTypeNode DummyTerminalNode,        PyTypeError t : temperatures) {
          cp.append(data.get_heat_capacity(t) / 4.184);
        }
        self.thermo_data=ThermoData(        ("kcal/mol" pyjavatuple h298),        ("cal/(mol*K)" pyjavatuple s298),        ("K" pyjavatuple temperatures),        ("cal/(mol*K)" pyjavatuple cp));
      }
    }
  }
  void update_xyz_string(  ArkaneSpecies self){
    PyTypeError xyz_list;
    PyTypeError element_symbol;
    PyTypeError row;
    xyz_list=list();
    if (((self.conformer != None) && (self.conformer.number != None))) {
      xyz_list.append(str(len(self.conformer.number.value_si)));
      xyz_list.append(self.label);
      for (      DummyTerminalTypeNode DummyTerminalNode,      PyTypeError number,      PyTypeError coordinate : zip(self.conformer.number.value_si,self.conformer.coordinates.value_si)) {
        element_symbol=get_element(integer(number)).symbol;
        row="{0:4}".format(element_symbol);
        row/="{0:14.8f}{1:14.8f}{2:14.8f}".format(coordinate * 1.0E10.tolist());
        xyz_list.append(row);
      }
    }
    return "\n".join(xyz_list);
  }
  void save_yaml(  ArkaneSpecies self){
    PyTypeError full_path;
    PyTypeError valid_chars;
    PyTypeError filename;
    if (!os.path.exists(os.path.join(os.path.abspath(path),"species",""))) {
      os.mkdir(os.path.join(os.path.abspath(path),"species",""));
    }
    valid_chars="-_.()<=>+ %s%s" %     (string.digits pyjavatuple string.ascii_letters);
    filename=os.path.join("species","".join(    gen (c for     DummyTerminalTypeNode DummyTerminalNode,    PyTypeError c : self.label if     c in valid_chars) ) + ".yml");
    full_path=os.path.join(path,filename);
    withstmt (open(full_path,"w")) {
      PyTypeError f;
      yaml.dump(self.as_dict(),f);
    }
    logging.debug("Dumping species {0} data as {1}".format(self.label,filename));
  }
  void load_yaml(  ArkaneSpecies self){
    PyTypeError content;
    PyTypeError freq_data;
    PyTypeError freq_data;
    PyTypeError yml_file;
    PyTypeError data;
    PyTypeError content;
    PyTypeError class_name;
    yml_file=os.path.basename(path);
    if (label) {
      logging.info("Loading statistical mechanics parameters for {0} from {1} file...".format(label,yml_file));
    }
 else {
      logging.info("Loading statistical mechanics parameters from {0} file...".format(yml_file));
    }
    withstmt (open(path,"r")) {
      PyTypeError f;
      content=f.read();
    }
    content=replace_yaml_syntax(content,label);
    data=yaml.safe_load(content);
    if (label) {
      try {
        if ((label != data["label"])) {
          logging.debug("Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label \"{0}\" for this species.".format(label,data["label"]));
        }
      }
 catch (      KeyError PyCpatDummy) {
        logging.debug("Did not find label for species {0} in .yml file.".format(label));
      }
      data["label"]=label;
    }
    try {
      class_name=data["class"];
    }
 catch (    KeyError PyCpatDummy) {
      throw new KeyError("Can only make objects if the `class` attribute in the dictionary is known");
    }
    if ((class_name != "ArkaneSpecies")) {
      throw new KeyError("Expected a ArkaneSpecies object, but got {0}".format(class_name));
    }
    del(data["class"]);
    freq_data=None;
    if (    "imaginary_frequency" in data) {
      freq_data=data["imaginary_frequency"];
      del(data["imaginary_frequency"]);
    }
    if (!data["is_ts"]) {
      if (      "smiles" in data) {
        data["species"]=Species(data["smiles"]);
      }
 else       if (      "adjacency_list" in data) {
        data["species"]=Species().from_adjacency_list(data["adjacency_list"]);
      }
 else       if (      "inchi" in data) {
        data["species"]=Species(data["inchi"]);
      }
 else {
        throw new ValueError("Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified".format(path));
      }
      data["species"].label=data["label"];
    }
    self.make_object(data,ARKANE_CLASS_DICT);
    if ((freq_data != None)) {
      self.imaginary_frequency=ScalarQuantity();
      self.imaginary_frequency.make_object(freq_data,ARKANE_CLASS_DICT);
    }
    if ((pdep && !self.is_ts && (self.smiles == None) && (self.adjacency_list == None) && (self.inchi == None) && (self.molecular_weight == None))) {
      throw new ValueError("The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}".format(path));
    }
    logging.debug("Parsed all YAML objects");
  }
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 11493
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - spinMultiplicity
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - spin_multiplicity
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - opticalIsomers
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - optical_isomers
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 -  for species {0}
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 
The loaded YAML file{0} seems to be from an older version of RMG/Arkane.
Some keywords will be automatically replaced before loading objects from this file.
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Replacing keyword "{key}" with "{value}" in the Arkane YAML file.
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : key
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:156 - Key ward is neglected : value
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - 

2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void replace_yaml_syntax(){
  PyTypeError label;
  PyTypeError syntax_correction_dict;
  PyTypeError replaced_keys;
  PyTypeError content;
  syntax_correction_dict=Map.of("spinMultiplicity","spin_multiplicity","opticalIsomers","optical_isomers");
  replaced_keys=list();
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError key,  PyTypeError value : syntax_correction_dict.items()) {
    if (    key in content) {
      content=content.replace(key,value);
      replaced_keys.append(key);
    }
  }
  label=(label != None) ? " for species {0}".format(label) : "";
  if (replaced_keys) {
    logging.info("\nThe loaded YAML file{0} seems to be from an older version of RMG/Arkane.\nSome keywords will be automatically replaced before loading objects from this file.".format(label));
  }
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError key : replaced_keys) {
    logging.info("Replacing keyword \"{key}\" with \"{value}\" in the Arkane YAML file.".format(key,syntax_correction_dict[key]));
  }
  if (replaced_keys) {
    logging.info("\n");
  }
  return content;
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 12581
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void is_pdep(){
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError job : job_list) {
    if (isinstance(job,PressureDependenceJob)) {
      return True;
    }
  }
  return False;
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 12774
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void check_conformer_energy(){
  PyTypeError energies;
  PyTypeError e_diff;
  energies=numpy.array(energies,numpy.float64);
  e_diff=energies[0] - numpy.min(energies) * rmgpy.constants.E_h * rmgpy.constants.Na / 1000;
  if ((e_diff >= 2)) {
    logging.warning();
  }
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 13045
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Could not identify element {0}
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Assuming isotope {0} is representative of element {1}
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void get_element_mass(){
  PyTypeError symbol;
  PyTypeError mass;
  PyTypeError mass;
  PyTypeError mass_list;
  PyTypeError max_weight;
  PyTypeError number;
  PyTypeError mass;
  PyTypeError number;
  PyTypeError number;
  PyTypeError symbol;
  PyTypeError max_weight;
  PyTypeError mass;
  PyTypeError symbol;
  symbol=None;
  number=None;
  if (isinstance(input_element,integer)) {
    symbol=symbol_by_number[input_element];
    number=input_element;
  }
 else   if (isinstance(input_element,str)) {
    symbol=input_element;
    number=next(    gen (key for     DummyTerminalTypeNode DummyTerminalNode,    PyTypeError key,    PyTypeError value : symbol_by_number.items() if (value == input_element)) );
  }
  if (((symbol == None) || (number == None))) {
    throw new ValueError("Could not identify element {0}".format(input_element));
  }
  mass_list=mass_by_symbol[symbol];
  if ((isotope != None)) {
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError iso_mass : mass_list) {
      if ((iso_mass[0] == isotope)) {
        mass=iso_mass[1];
        break;
      }
    }
  }
 else   if ((len(mass_list[0]) == 2)) {
    mass=mass_list[0][1];
    logging.warning("Assuming isotope {0} is representative of element {1}".format(mass_list[0][0],symbol));
  }
 else {
    max_weight=mass_list[0][2];
    mass=mass_list[0][1];
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError iso_mass : mass_list) {
      if ((iso_mass[2] > max_weight)) {
        max_weight=iso_mass[2];
        mass=iso_mass[1];
      }
    }
  }
  return   (number pyjavatuple mass);
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 14640
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Assign
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - H
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - He
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Li
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Be
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - B
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - C
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - N
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - O
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - F
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ne
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Na
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Al
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Si
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - P
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - S
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ar
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - K
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ca
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ti
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - V
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fe
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Co
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ni
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Zn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ga
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ge
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - As
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Se
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Br
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Kr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Y
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Zr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mo
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ru
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ag
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - In
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Te
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - I
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Xe
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cs
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ba
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - La
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ce
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Eu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Gd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Dy
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ho
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Er
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Yb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ta
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - W
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Re
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Os
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ir
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pt
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Au
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bi
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Po
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - At
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ra
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ac
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Th
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pa
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - U
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Np
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Am
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bk
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Es
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Md
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - No
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Db
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hs
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mt
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ds
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lv
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ts
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Og
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - symbol_by_number=Map.of(1,"H",2,"He",3,"Li",4,"Be",5,"B",6,"C",7,"N",8,"O",9,"F",10,"Ne",11,"Na",12,"Mg",13,"Al",14,"Si",15,"P",16,"S",17,"Cl",18,"Ar",19,"K",20,"Ca",21,"Sc",22,"Ti",23,"V",24,"Cr",25,"Mn",26,"Fe",27,"Co",28,"Ni",29,"Cu",30,"Zn",31,"Ga",32,"Ge",33,"As",34,"Se",35,"Br",36,"Kr",37,"Rb",38,"Sr",39,"Y",40,"Zr",41,"Nb",42,"Mo",43,"Tc",44,"Ru",45,"Rh",46,"Pd",47,"Ag",48,"Cd",49,"In",50,"Sn",51,"Sb",52,"Te",53,"I",54,"Xe",55,"Cs",56,"Ba",57,"La",58,"Ce",59,"Pr",60,"Nd",61,"Pm",62,"Sm",63,"Eu",64,"Gd",65,"Tb",66,"Dy",67,"Ho",68,"Er",69,"Tm",70,"Yb",71,"Lu",72,"Hf",73,"Ta",74,"W",75,"Re",76,"Os",77,"Ir",78,"Pt",79,"Au",80,"Hg",81,"Tl",82,"Pb",83,"Bi",84,"Po",85,"At",86,"Rn",87,"Fr",88,"Ra",89,"Ac",90,"Th",91,"Pa",92,"U",93,"Np",94,"Pu",95,"Am",96,"Cm",97,"Bk",98,"Cf",99,"Es",100,"Fm",101,"Md",102,"No",103,"Lr",104,"Rf",105,"Db",106,"Sg",107,"Bh",108,"Hs",109,"Mt",110,"Ds",111,"Rg",112,"Cn",113,"Nh",114,"Fl",115,"Mc",116,"Lv",117,"Ts",118,"Og");

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 15606
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - Assign
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - H
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - He
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Li
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Be
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - B
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - C
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - N
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - O
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - F
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ne
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Na
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Al
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Si
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - P
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - S
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ar
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - K
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ca
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ti
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - V
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fe
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Co
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ni
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Zn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ga
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ge
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - As
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Se
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Br
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Kr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Y
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Zr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mo
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ru
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ag
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - In
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Te
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - I
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Xe
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cs
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ba
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - La
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ce
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Eu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Gd
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Dy
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ho
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Er
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Yb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ta
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - W
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Re
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Os
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ir
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pt
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Au
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Tl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pb
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bi
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Po
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - At
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ra
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ac
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Th
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pa
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - U
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Np
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Pu
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Am
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bk
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Es
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fm
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Md
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - No
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lr
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rf
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Db
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Sg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Bh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Hs
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mt
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ds
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Rg
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Cn
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Nh
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Fl
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Mc
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Lv
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Ts
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Og
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - mass_by_symbol=Map.of("H",new int[]{{1,1.00782503224,0.999885},{2,2.01410177812,1.15E-4},{3,3.0160492779,0}},"He",new int[]{{3,3.0160293201,1.34E-6},{4,4.00260325414,0.99999866}},"Li",new int[]{{6,6.0151228874,0.0759},{7,7.0160034366,0.9241}},"Be",new int[]{{9,9.012183066,1}},"B",new int[]{{10,10.01293695,0.199},{11,11.00930536,0.801}},"C",new int[]{{12,12.0,0.9893},{13,13.00335483507,0.0107},{14,14.0032419884,0}},"N",new int[]{{14,14.00307400443,0.99636},{15,15.00010889889,0.00364}},"O",new int[]{{16,15.99491461957,0.99757},{17,16.99913175651,3.8E-4},{18,17.99915961287,0.00205}},"F",new int[]{{19,18.99840316274,1}},"Ne",new int[]{{20,19.9924401762,0.9048},{21,20.993846685,0.0027},{22,21.991385114,0.0925}},"Na",new int[]{{23,22.989769282,1}},"Mg",new int[]{{24,23.985041697,0.7899},{25,24.985836976,0.1},{26,25.982592968,0.1101}},"Al",new int[]{{27,26.98153853,1}},"Si",new int[]{{28,27.97692653465,0.92223},{29,28.97649466491,0.04685},{30,29.973770136,0.03092}},"P",new int[]{{31,30.97376199843,1}},"S",new int[]{{32,31.9720711744,0.9499},{33,32.9714589098,0.0075},{34,33.967867004,0.0425},{36,35.96708071,1.0E-4}},"Cl",new int[]{{35,34.968852682,0.7576},{37,36.965902603,0.2424}},"Ar",new int[]{{36,35.967545105,0.003336},{38,37.96273211,6.29E-4},{40,39.9623831237,0.996035}},"K",new int[]{{39,38.9637064864,0.932581},{40,39.963998167,1.17E-4},{41,40.9618252579,0.067302}},"Ca",new int[]{{40,39.962590863,0.96941},{42,41.95861783,0.00647},{43,42.95876644,0.00135},{44,43.95548156,0.02086},{46,45.953689,4.0E-5},{48,47.95252276,0.00187}},"Sc",new int[]{{45,44.95590829,1}},"Ti",new int[]{{46,45.95262772,0.0825},{47,46.95175879,0.0744},{48,47.94794198,0.7372},{49,48.94786568,0.0541},{50,49.94478689,0.0518}},"V",new int[]{{50,49.94715602,0.0025},{51,50.94395705,0.9975}},"Cr",new int[]{{50,49.94604184,0.04345},{52,51.94050624,0.83789},{53,52.94064816,0.09501},{54,53.93887917,0.02365}},"Mn",new int[]{{55,54.93804391,1}},"Fe",new int[]{{54,53.939609,0.05845},{56,55.93493633,0.91754},{57,56.93539284,0.02119},{58,57.93327444,0.00282}},"Co",new int[]{{59,58.9331943,1}},"Ni",new int[]{{58,57.93534242,0.68077},{60,59.93078589,0.26223},{61,60.93105558,0.011399},{62,61.92834538,0.036346},{64,63.92796682,0.009255}},"Cu",new int[]{{63,62.92959773,0.6915},{65,64.92778971,0.3085}},"Zn",new int[]{{64,63.92914202,0.4917},{66,65.92603382,0.2773},{67,66.92712776,0.0404},{68,67.92484456,0.1845},{70,69.9253192,0.0061}},"Ga",new int[]{{69,68.9255735,0.60108},{71,70.92470259,0.39892}},"Ge",new int[]{{70,69.92424876,0.2057},{72,71.922075827,0.2745},{73,72.923458957,0.0775},{74,73.921177761,0.365},{76,75.921402726,0.0773}},"As",new int[]{{75,74.92159458,1}},"Se",new int[]{{74,73.922475934,0.0089},{76,75.919213704,0.0937},{77,76.919914155,0.0763},{78,77.91730928,0.2377},{80,79.9165218,0.4961},{82,81.9166995,0.0873}},"Br",new int[]{{79,78.9183376,0.5069},{81,80.9162897,0.4931}},"Kr",new int[]{{78,77.92036495,0.00355},{80,79.91637809,0.02286},{82,81.91348274,0.11593},{83,82.91412716,0.115},{84,83.9114977282,0.56987},{86,85.9106106269,0.17279}},"Rb",new int[]{{85,84.911789738,0.7217},{87,86.9091805311,0.2783}},"Sr",new int[]{{84,83.9134191,0.0056},{86,85.9092606,0.0986},{87,86.9088775,0.07},{88,87.9056125,0.8258}},"Y",new int[]{{89,88.9058403,1}},"Zr",new int[]{{90,89.9046977,0.5145},{91,90.9056396,0.1122},{92,91.9050347,0.1715},{94,93.9063108,0.1738},{96,95.9082714,0.028}},"Nb",new int[]{{93,92.906373,1}},"Mo",new int[]{{92,91.90680797,0.1453},{94,93.9050849,0.0915},{95,94.90583877,0.1584},{96,95.90467612,0.1667},{97,96.90601812,0.096},{98,97.90540482,0.2439},{100,99.9074718,0.0982}},"Tc",new int[]{{97,96.9063667},{98,97.9072124},{99,98.9062508}},"Ru",new int[]{{96,95.90759025,0.0554},{98,97.9052869,0.0187},{99,98.9059341,0.1276},{100,99.9042143,0.126},{101,100.9055769,0.1706},{102,101.9043441,0.3155},{104,103.9054275,0.1862}},"Rh",new int[]{{103,102.905498,1}},"Pd",new int[]{{102,101.9056022,0.0102},{104,103.9040305,0.1114},{105,104.9050796,0.2233},{106,105.9034804,0.2733},{108,107.9038916,0.2646},{110,109.90517221,0.1172}},"Ag",new int[]{{107,106.9050916,0.51839},{109,108.9047553,0.48161}},"Cd",new int[]{{106,105.9064599,0.0125},{108,107.9041834,0.0089},{110,109.90300662,0.1249},{111,110.90418288,0.128},{112,111.9027629,0.2413},{113,112.9044081,0.1222},{114,113.9033651,0.2873},{116,115.9047632,0.0749}},"In",new int[]{{113,112.9040618,0.0429},{115,114.9038788,0.9571}},"Sn",new int[]{{112,111.9048239,0.0097},{114,113.9027827,0.0066},{115,114.9033447,0.0034},{116,115.9017428,0.1454},{117,116.902954,0.0768},{118,117.9016066,0.2422},{119,118.9033112,0.0859},{120,119.9022016,0.3258},{122,121.9034438,0.0463},{124,123.9052766,0.0579}},"Sb",new int[]{{121,120.903812,0.5721},{123,122.9042132,0.4279}},"Te",new int[]{{120,119.9040593,9.0E-4},{122,121.9030435,0.0255},{123,122.9042698,0.0089},{124,123.9028171,0.0474},{125,124.9044299,0.0707},{126,125.9033109,0.1884},{128,127.9044613,0.3174},{130,129.9062227,0.3408}},"I",new int[]{{127,126.9044719,1}},"Xe",new int[]{{124,123.905892,9.52E-4},{126,125.9042983,8.9E-4},{128,127.903531,0.019102},{129,128.9047809,0.264006},{130,129.9035093,0.04071},{131,130.9050841,0.212324},{132,131.9041551,0.269086},{134,133.9053947,0.104357},{136,135.9072145,0.088573}},"Cs",new int[]{{133,132.905452,1}},"Ba",new int[]{{130,129.9063207,0.00106},{132,131.9050611,0.00101},{134,133.9045082,0.02417},{135,134.9056884,0.06592},{136,135.9045757,0.07854},{137,136.9058271,0.11232},{138,137.905247,0.71698}},"La",new int[]{{138,137.9071149,8.881E-4},{139,138.9063563,0.9991119}},"Ce",new int[]{{136,135.9071292,0.00185},{138,137.905991,0.00251},{140,139.9054431,0.8845},{142,141.9092504,0.11114}},"Pr",new int[]{{141,140.9076576,1}},"Nd",new int[]{{142,141.907729,0.27152},{143,142.90982,0.12174},{144,143.910093,0.23798},{145,144.9125793,0.08293},{146,145.9131226,0.17189},{148,147.9168993,0.05756},{150,149.9209022,0.05638}},"Pm",new int[]{{145,144.9127559},{147,146.915145}},"Sm",new int[]{{144,143.9120065,0.0307},{147,146.9149044,0.1499},{148,147.9148292,0.1124},{149,148.9171921,0.1382},{150,149.9172829,0.0738},{152,151.9197397,0.2675},{154,153.9222169,0.2275}},"Eu",new int[]{{151,150.9198578,0.4781},{153,152.921238,0.5219}},"Gd",new int[]{{152,151.9197995,0.002},{154,153.9208741,0.0218},{155,154.9226305,0.148},{156,155.9221312,0.2047},{157,156.9239686,0.1565},{158,157.9241123,0.2484},{160,159.9270624,0.2186}},"Tb",new int[]{{159,158.9253547,1}},"Dy",new int[]{{156,155.9242847,5.6E-4},{158,157.9244159,9.5E-4},{160,159.9252046,0.02329},{161,160.9269405,0.18889},{162,161.9268056,0.25475},{163,162.9287383,0.24896},{164,163.9291819,0.2826}},"Ho",new int[]{{165,164.9303288,1}},"Er",new int[]{{162,161.9287884,0.00139},{164,163.9292088,0.01601},{166,165.9302995,0.33503},{167,166.9320546,0.22869},{168,167.9323767,0.26978},{170,169.9354702,0.1491}},"Tm",new int[]{{169,168.9342179,1}},"Yb",new int[]{{168,167.9338896,0.00123},{170,169.9347664,0.02982},{171,170.9363302,0.1409},{172,171.9363859,0.2168},{173,172.9382151,0.16103},{174,173.9388664,0.32026},{176,175.9425764,0.12996}},"Lu",new int[]{{175,174.9407752,0.97401},{176,175.9426897,0.02599}},"Hf",new int[]{{174,173.9400461,0.0016},{176,175.9414076,0.0526},{177,176.9432277,0.186},{178,177.9437058,0.2728},{179,178.9458232,0.1362},{180,179.946557,0.3508}},"Ta",new int[]{{180,179.9474648,1.201E-4},{181,180.9479958,0.9998799}},"W",new int[]{{180,179.9467108,0.0012},{182,181.9482039,0.265},{183,182.9502228,0.1431},{184,183.9509309,0.3064},{186,185.9543628,0.2843}},"Re",new int[]{{185,184.9529545,0.374},{187,186.9557501,0.626}},"Os",new int[]{{184,183.9524885,2.0E-4},{186,185.953835,0.0159},{187,186.9557474,0.0196},{188,187.9558352,0.1324},{189,188.9581442,0.1615},{190,189.9584437,0.2626},{192,191.961477,0.4078}},"Ir",new int[]{{191,190.9605893,0.373},{193,192.9629216,0.627}},"Pt",new int[]{{190,189.9599297,1.2E-4},{192,191.9610387,0.00782},{194,193.9626809,0.3286},{195,194.9647917,0.3378},{196,195.9649521,0.2521},{198,197.9678949,0.07356}},"Au",new int[]{{197,196.9665688,1}},"Hg",new int[]{{196,195.9658326,0.0015},{198,197.9667686,0.0997},{199,198.9682806,0.1687},{200,199.9683266,0.231},{201,200.9703028,0.1318},{202,201.9706434,0.2986},{204,203.973494,0.0687}},"Tl",new int[]{{203,202.9723446,0.2952},{205,204.9744278,0.7048}},"Pb",new int[]{{204,203.973044,0.014},{206,205.9744657,0.241},{207,206.9758973,0.221},{208,207.9766525,0.524}},"Bi",new int[]{{209,208.9803991,1}},"Po",new int[]{{209,208.9824308},{210,209.9828741}},"At",new int[]{{210,209.9871479},{211,210.9874966}},"Rn",new int[]{{211,210.9906011},{220,220.0113941},{222,222.0175782}},"Fr",new int[]{{223,223.019736}},"Ra",new int[]{{223,223.0185023},{224,224.020212},{226,226.0254103},{228,228.0310707}},"Ac",new int[]{{227,227.0277523}},"Th",new int[]{{230,230.0331341,0},{232,232.0380558,1}},"Pa",new int[]{{231,231.0358842,1}},"U",new int[]{{233,233.0396355,0},{234,234.0409523,5.4E-5},{235,235.0439301,0.007204},{236,236.0455682,0},{238,238.0507884,0.992742}},"Np",new int[]{{236,236.04657},{237,237.0481736}},"Pu",new int[]{{238,238.0495601},{239,239.0521636},{240,240.0538138},{241,241.0568517},{242,242.0587428},{244,244.0642053}},"Am",new int[]{{241,241.0568293},{243,243.0613813}},"Cm",new int[]{{243,243.0613893},{244,244.0627528},{245,245.0654915},{246,246.0672238},{247,247.0703541},{248,248.0723499}},"Bk",new int[]{{247,247.0703073},{249,249.0749877}},"Cf",new int[]{{249,249.0748539},{250,250.0764062},{251,251.0795886},{252,252.0816272}},"Es",new int[]{{252,252.08298}},"Fm",new int[]{{257,257.0951061}},"Md",new int[]{{258,258.0984315},{260,260.10365}},"No",new int[]{{259,259.10103}},"Lr",new int[]{{262,262.10961}},"Rf",new int[]{{267,267.12179}},"Db",new int[]{{268,268.12567}},"Sg",new int[]{{271,271.13393}},"Bh",new int[]{{272,272.13826}},"Hs",new int[]{{270,270.13429}},"Mt",new int[]{{276,276.15159}},"Ds",new int[]{{281,281.16451}},"Rg",new int[]{{280,280.16514}},"Cn",new int[]{{285,285.17712}},"Nh",new int[]{{284,284.17873}},"Fl",new int[]{{289,289.19042}},"Mc",new int[]{{288,288.19274}},"Lv",new int[]{{293,293.20449}},"Ts",new int[]{{292,292.20746}},"Og",new int[]{{294,294.21392}});

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 25735
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Either symbols or numbers must be given.
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:549 - Corresponding Expression is not Found class org.jpp.astnodes.ast.ListCompListComp(elt=Subscript(value=Name(id=symbol_by_number,ctx=Load,),slice=Index(value=Name(id=number,ctx=Load,),),ctx=Load,),generators=[comprehension],)
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Tuple]
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void get_center_of_mass(){
  PyTypeError mass;
  PyTypeError symbols;
  if (((symbols == None) && (numbers == None))) {
    throw new IndexError("Either symbols or numbers must be given.");
  }
  if ((numbers != None)) {
  }
    (total_mass pyjavatuple center)=  (0 pyjavatuple numpy.zeros(3,numpy.float64));
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError coord,  PyTypeError symbol : zip(coords,symbols)) {
    mass=get_element_mass(symbol)[0];
    center/=mass * coord;
    total_mass/=mass;
  }
  center+=total_mass;
  return center;
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 26290
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:265 - Either symbols or numbers must be given.
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:549 - Corresponding Expression is not Found class org.jpp.astnodes.ast.ListCompListComp(elt=Subscript(value=Name(id=symbol_by_number,ctx=Load,),slice=Index(value=Name(id=number,ctx=Load,),),ctx=Load,),generators=[comprehension],)
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : coords
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : numbers
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : symbols
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : coords
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : numbers
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : symbols
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Tuple]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Tuple]
2020-10-28 21:47:55 DEBUG MapPyExpressionsJDK:118 - Key ward is neglected : reverse
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void get_principal_moments_of_inertia(){
  PyTypeError tensor0;
  tensor0=get_moment_of_inertia_tensor(coords,numbers,symbols);
    (axes pyjavatuple principal_moments_of_inertia)=numpy.linalg.eig(tensor0);
    (axes pyjavatuple principal_moments_of_inertia)=zip(sorted(zip(numpy.ndarray.tolist(principal_moments_of_inertia),numpy.ndarray.tolist(axes)),True));
  return   (axes pyjavatuple principal_moments_of_inertia);
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 26713
2020-10-28 21:47:55 DEBUG PythonASTUtil:71 - FunctionDef
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG MapPyStatementsTOJDK:275 - [Name]
2020-10-28 21:47:55 DEBUG PythonASTUtil:75 - void clean_dir(){
  PyTypeError item_path;
  PyTypeError item_extension;
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError item : os.listdir(base_dir_path)) {
    item_path=os.path.join(base_dir_path,item);
    if (os.path.isfile(item_path)) {
      item_extension=os.path.splitext(item_path)[-1];
      if ((      item in files_to_delete || (      item_extension in file_extensions_to_delete &&       item not in files_to_keep))) {
        os.remove(item_path);
      }
    }
 else {
      if (      os.path.split(item_path)[-1] in sub_dir_to_keep) {
        continue;
      }
      shutil.rmtree(item_path);
    }
  }
}

2020-10-28 21:47:55 DEBUG PythonASTUtil:77 - Start Char : 27348
