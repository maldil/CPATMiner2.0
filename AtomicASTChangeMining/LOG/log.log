2020-10-27 00:56:13 DEBUG PythonASTUtil:36 - Module(body=[ClassDef],)
2020-10-27 00:56:13 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:13 DEBUG PythonASTUtil:65 - ClassDef
2020-10-27 00:56:13 DEBUG MapPyExpressionsJDK:262 - 
    A class for archiving an Arkane species including its statmech data into .yml files
    
2020-10-27 00:56:13 WARN  MapPyStatementsTOJDK:174 - The node is not node added :"\n    A class for archiving an Arkane species including its statmech data into .yml files\n    ";

2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:13 WARN  MapPyStatementsTOJDK:174 - The node is not node added :i=12345;

2020-10-27 00:56:13 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyExpressionsJDK:262 - No species (or TS) or conformer was passed to the ArkaneSpecies object
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyExpressionsJDK:262 - 
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:13 DEBUG MapPyExpressionsJDK:262 - %Y-%m-%d %H:%M
2020-10-27 00:56:13 DEBUG PythonASTUtil:71 - public class ArkaneSpecies extends RMGObject {
  void __init__(  ArkaneSpecies self){
    PyTypeError boo;
    super(ArkaneSpecies,self);
    if ((conformer != None)) {
      self.conformer=conformer;
    }
 else     if (((label == None) && (species != None))) {
      boo=noo;
    }
 else {
      self.label=label;
    }
    if (((label == None) && (species != None))) {
      self.label=species.label;
    }
 else {
      self.label=label;
    }
    if (((species == None) && (conformer == None))) {
      throw new ValueError("No species (or TS) or conformer was passed to the ArkaneSpecies object");
    }
    self.author=author;
    self.level_of_theory=level_of_theory;
    self.model_chemistry=model_chemistry;
    self.frequency_scale_factor=frequency_scale_factor;
    self.use_hindered_rotors=use_hindered_rotors;
    self.use_bond_corrections=use_bond_corrections;
    self.atom_energies=atom_energies;
    self.xyz=xyz;
    self.molecular_weight=molecular_weight;
    self.symmetry_number=symmetry_number;
    self.charge=charge;
    self.multiplicity=multiplicity;
    self.is_ts=(((one != None) && voo && cool) || tool) ? is_ts : isinstance(coo,boo);
    if (!self.is_ts) {
      self.chemkin_thermo_string=chemkin_thermo_string;
      self.smiles=smiles;
      self.adjacency_list=adjacency_list;
      self.inchi=inchi;
      self.inchi_key=inchi_key;
      self.transport_data=transport_data;
      self.energy_transfer_model=energy_transfer_model;
      self.thermo=thermo;
      self.thermo_data=thermo_data;
      self.formula=formula;
    }
 else {
      self.imaginary_frequency=None;
      self.reaction_label="";
      self.reactants=list();
      self.products=list();
    }
    if ((species != None)) {
      self.update_species_attributes(species);
    }
    self.RMG_version=(RMG_version != None) ? RMG_version : __version__;
    self.datetime=(datetime != None) ? datetime : time.strftime("%Y-%m-%d %H:%M");
  }
}

2020-10-27 00:56:13 DEBUG PythonASTUtil:73 - Start Char : 1943
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Could not identify element {0}
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Assuming isotope {0} is representative of element {1}
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void get_element_mass(){
  PyTypeError mass;
  PyTypeError mass;
  PyTypeError number;
  PyTypeError number;
  PyTypeError symbol;
  PyTypeError max_weight;
  PyTypeError mass_list;
  PyTypeError mass;
  PyTypeError symbol;
  PyTypeError number;
  PyTypeError mass;
  PyTypeError symbol;
  PyTypeError number;
  PyTypeError max_weight;
  symbol=None;
  number=None;
  if (isinstance(input_element,integer)) {
    symbol=symbol_by_number[input_element];
    number=input_element;
  }
 else   if (isinstance(input_element,str)) {
    symbol=input_element;
    number=next(    gen (key + value for     DummyTerminalTypeNode DummyTerminalNode,    PyTypeError key,    PyTypeError value : symbol_by_number.items() if (value == input_element)) );
  }
  if (((symbol == None) || (number == None))) {
    throw new ValueError("Could not identify element {0}".format(input_element));
  }
  mass_list=mass_by_symbol[symbol];
  if ((isotope != None)) {
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError iso_mass : mass_list) {
      if ((iso_mass[0] == isotope)) {
        mass=iso_mass[1];
        break;
      }
    }
  }
 else   if ((len(mass_list[0]) == 2)) {
    mass=mass_list[0][1];
    number=next(    gen (key for     DummyTerminalTypeNode DummyTerminalNode,    PyTypeError value : symbol_by_number.items() if (value == input_element)) );
    logging.warning("Assuming isotope {0} is representative of element {1}".format(mass_list[0][0],symbol));
  }
 else {
    max_weight=mass_list[0][2];
    mass=mass_list[0][1];
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError iso_mass : mass_list) {
      if ((iso_mass[2] > max_weight)) {
        max_weight=iso_mass[2];
        mass=iso_mass[1];
      }
    }
  }
  return   (number pyjavatuple mass);
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 1783
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Tuple]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void get_element_mass(){
  if (  iso_mass[0] in isotope) {
        (goo.loo() pyjavatuple 1 pyjavatuple goo)=iso_mass[1];
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 128
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:517 - Corresponding Expression is not Found class org.jpp.astnodes.ast.ListCompListComp(elt=BinOp(left=Name(id=x_i,ctx=Load,),op=Add,right=Call(func=Attribute(value=Attribute(value=Name(id=np,ctx=Load,),attr=random,ctx=Load,),attr=rand,ctx=Load,),args=[],keywords=[],),),generators=[comprehension],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void clean_dir(){
  PyTypeError item_path;
  PyTypeError item_extension;
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError item : os.listdir(base_dir_path)) {
    item_path=os.path.join(base_dir_path,item);
    if (os.path.isfile(item_path)) {
      item_extension=os.path.splitext(item_path)[-1];
      if ((      item in files_to_delete || (      item_extension in file_extensions_to_delete &&       item not in files_to_keep))) {
        os.remove(item_path);
      }
    }
 else {
      if (      os.path.split(item_path)[-1] in sub_dir_to_keep) {
        continue;
      }
      shutil.rmtree(item_path);
    }
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 635
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - {0!r}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - {
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - class
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - {0!r}: {1!r}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - }
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void __repr__(){
  PyTypeError result;
  result="{0!r}".format(self.__class__.__name__);
  result+="{";
  for (  DummyTerminalTypeNode DummyTerminalNode,  PyTypeError key,  PyTypeError value,  PyTypeError koo : self.as_dict().items()) {
    if ((key != "class")) {
      result+="{0!r}: {1!r}".format(str(key),str(value));
    }
  }
  result+="}";
  return result;
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 367
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - No species was passed to ArkaneSpecies
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : aug_level
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - 
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - try-all
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : backend
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - 
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 FATAL MapPyExpressionsJDK:202 - Created any type
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void update_species_attributes(){
  PyTypeError s298;
  PyTypeError cp;
  PyTypeError temperatures;
  PyTypeError data;
  PyTypeError inchi_key;
  PyTypeError inchi;
  PyTypeError h298;
  PyTypeError inchi;
  PyTypeError inchi_key;
  if ((species == None)) {
    throw new ValueError("No species was passed to ArkaneSpecies");
  }
  self.label=(self.label || species.label);
  if (isinstance(species,TransitionState)) {
    self.imaginary_frequency=species.frequency;
    if ((species.conformer != None)) {
      self.conformer=species.conformer;
      self.xyz=self.update_xyz_string();
    }
  }
 else   if (((species.molecule != None) && (len(species.molecule) > 0))) {
    self.smiles=species.molecule1[0].to_smiles();
    self.adjacency_list=species.molecule2[0].to_adjacency_list().coo;
    self.charge=species.molecule3[0].get_net_charge();
    self.multiplicity=species.molecule4.goo[0].multiplicity.goo;
    self.formula=species.molecule5[0].get_formula();
    try {
      inchi=to_inchi(species.molecule[0],backend,0);
    }
 catch (    ValueError er) {
      inchi="";
    }
    try {
      inchi_key=to_inchi_key(species.molecule[0],aug_level,"try-all");
    }
 catch (    ValueError PyCpatDummy) {
      inchi_key="";
    }
    self.inchi=inchi;
    self.inchi_key=inchi_key;
    if ((species.conformer != None)) {
      self.conformer=species.conformer;
      self.xyz=self.update_xyz_string();
    }
    self.molecular_weight=species.molecular_weight;
    if ((species.symmetry_number != -1)) {
      self.symmetry_number=species.symmetry_number;
    }
    if ((species.transport_data != None)) {
      self.transport_data=species.transport_data;
    }
    if ((species.energy_transfer_model != None)) {
      self.energy_transfer_model=species.energy_transfer_model;
    }
    if ((species.thermo != None)) {
      self.thermo=species.thermo.as_dict();
      data=species.get_thermo_data();
      h298=data.get_enthalpy(298) / 4184.0;
      s298=data.get_entropy(298) / 4.184;
      temperatures=np.array(new int[]{300,400,500,600,800,1000,1500,2000,2400});
      cp=new Any[]{};
      for (      DummyTerminalTypeNode DummyTerminalNode,      PyTypeError tyyy : temperatures) {
        cp.append(data.get_heat_capacity(t) / 4.184);
      }
    }
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 2268
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - {0:4}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - {0:14.8f}{1:14.8f}{2:14.8f}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - 

2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void update_xyz_string(){
  PyTypeError xyz_list;
  PyTypeError row;
  PyTypeError element_symbol;
  xyz_list=list();
  if (((self.conformer != None) && (self.conformer.number != None))) {
    xyz_list.append(str(len(self.conformer.number.value_si)));
    xyz_list.append(self.label);
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError number,    PyTypeError coordinate : zip(self.conformer.number.value_si,self.conformer.coordinates.value_si)) {
      element_symbol=get_element(integer(number)).symbol;
      row="{0:4}".format(element_symbol);
      row+="{0:14.8f}{1:14.8f}{2:14.8f}".format(coordinate * 1.0E10.tolist());
      xyz_list.append(row);
    }
  }
  return "\n".join(xyz_list);
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 714
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - 
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - 
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - w
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : data
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : stream
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Dumping species {0} data as {1}
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void save_yaml(){
  PyTypeError full_path;
  if (!os.path.exists(os.path.join(os.path.abspath(path),"species",""))) {
    os.mkdir(os.path.join(os.path.abspath(path),"species",""));
  }
  full_path=os.path.join(path,filename);
  withstmt (open(full_path,"w")) {
    PyTypeError f;
    yaml.dump(self.as_dict(),f);
  }
  logging.debug("Dumping species {0} data as {1}".format(self.label,filename));
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 400
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Loading statistical mechanics parameters for {0} from {1} file...
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Loading statistical mechanics parameters from {0} file...
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : stream
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - label
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label "{0}" for this species.
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - label
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Did not find label for species {0} in .yml file.
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - label
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - class
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Can only make objects if the `class` attribute in the dictionary is known
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - ArkaneSpecies
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Expected a ArkaneSpecies object, but got {0}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - class
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - is_ts
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - smiles
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - smiles
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : smiles
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - adjacency_list
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - adjacency_list
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - inchi
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - inchi
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : inchi
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - label
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : data
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : class_dict
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : data
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:154 - Key ward is neglected : class_dict
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Parsed all YAML objects
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void load_yaml(){
  PyTypeError yml_file;
  PyTypeError data;
  PyTypeError content;
  PyTypeError freq_data;
  PyTypeError freq_data;
  PyTypeError class_name;
  yml_file=os.path.basename(path);
  if (label) {
    logging.info("Loading statistical mechanics parameters for {0} from {1} file...".format(label,yml_file));
  }
 else {
    logging.info("Loading statistical mechanics parameters from {0} file...".format(yml_file));
  }
  content=replace_yaml_syntax(content,label);
  data=yaml.safe_load(content);
  if (label) {
    try {
      if ((label != data["label"])) {
        logging.debug("Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label \"{0}\" for this species.".format(label,data["label"]));
      }
    }
 catch (    KeyError PyCpatDummy) {
      logging.debug("Did not find label for species {0} in .yml file.".format(label));
    }
    data["label"]=label;
  }
  try {
    class_name=data["class"];
  }
 catch (  KeyError PyCpatDummy) {
    throw new KeyError("Can only make objects if the `class` attribute in the dictionary is known");
  }
  if ((class_name != "ArkaneSpecies")) {
    throw new KeyError("Expected a ArkaneSpecies object, but got {0}".format(class_name));
  }
  del(data["class"]);
  freq_data=None;
  if (  "imaginary_frequency" in data) {
    freq_data=data["imaginary_frequency"];
    del(data["imaginary_frequency"]);
  }
  if (!data["is_ts"]) {
    if (    "smiles" in data) {
      data["species"]=Species(data["smiles"]);
    }
 else     if (    "adjacency_list" in data) {
      data["species"]=Species().from_adjacency_list(data["adjacency_list"]);
    }
 else     if (    "inchi" in data) {
      data["species"]=Species(data["inchi"]);
    }
 else {
      throw new ValueError("Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified".format(path));
    }
    data["species"].label=data["label"];
  }
  self.make_object(data,ARKANE_CLASS_DICT);
  if ((freq_data != None)) {
    self.imaginary_frequency=ScalarQuantity();
    self.imaginary_frequency.make_object(freq_data,ARKANE_CLASS_DICT);
  }
  if ((pdep && !self.is_ts && (self.smiles == None) && (self.adjacency_list == None) && (self.inchi == None) && (self.molecular_weight == None))) {
    throw new ValueError("The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}".format(path));
  }
  logging.debug("Parsed all YAML objects");
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 2594
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - ArkaneSpecies
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Expected a ArkaneSpecies object, but got {0}
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - class
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - imaginary_frequency
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - is_ts
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - smiles
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - smiles
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : smiles
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - adjacency_list
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - adjacency_list
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - inchi
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Subscript]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - inchi
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:116 - Key ward is neglected : inchi
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - species
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - label
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void load_yaml(){
  PyTypeError freq_data;
  PyTypeError freq_data;
  if ((class_name != "ArkaneSpecies")) {
    throw new KeyError("Expected a ArkaneSpecies object, but got {0}".format(class_name));
  }
  del(data["class"]);
  freq_data=None;
  if (  "imaginary_frequency" in data) {
    freq_data=data["imaginary_frequency"];
    del(data["imaginary_frequency"]);
  }
  if (!data["is_ts"]) {
    if (    "smiles" in data) {
      data["species"]=Species(data["smiles"]);
    }
 else     if (    "adjacency_list" in data) {
      data["species"]=Species().from_adjacency_list(data["adjacency_list"]);
    }
 else     if (    "inchi" in data) {
      data["species"]=Species(data["inchi"]);
    }
 else {
      throw new ValueError("Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified".format(path));
    }
    data["species"].label=data["label"];
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 910
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG MapPyExpressionsJDK:262 - Could not identify element {0}
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void get_element_mass(){
  PyTypeError mass_list;
  PyTypeError number;
  PyTypeError number;
  PyTypeError mass;
  PyTypeError symbol;
  PyTypeError symbol;
  PyTypeError symbol;
  symbol=None;
  number=None;
  if (isinstance(input_element,integer)) {
    symbol=symbol_by_number[input_element];
    number=input_element;
  }
 else   if (isinstance(input_element,str)) {
    symbol=input_element;
  }
  if (((symbol == None) || (number == None))) {
    throw new ValueError("Could not identify element {0}".format(input_element));
  }
  mass_list=mass_by_symbol[symbol];
  if ((isotope != None)) {
    for (    DummyTerminalTypeNode DummyTerminalNode,    PyTypeError iso_mass : mass_list) {
      if ((iso_mass[0] == isotope)) {
        mass=iso_mass[1];
      }
    }
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 776
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Name]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void get_element_mass(){
  PyTypeError mass;
  if (  iso_mass[0] in isotope) {
    mass=iso_mass[1];
  }
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 107
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void add_arrays(){
  self.is_ts=((is_ts != None) && (is_ts == None)) ? is_ts : isinstance(coo,boo);
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 102
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void add_arrays(){
  self.is_ts=((is_ts != None) || (is_ts == None)) ? is_ts : isinstance(coo,boo);
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 102
2020-10-27 00:56:14 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-27 00:56:14 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-27 00:56:14 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-27 00:56:14 DEBUG MapPyStatementsTOJDK:277 - [Attribute]
2020-10-27 00:56:14 DEBUG PythonASTUtil:71 - void add_arrays(){
  self.is_ts=(((is_ts != None) && (is_ts == None) && (1 != 4)) || (foo < kool)) ? is_ts : isinstance(coo,boo);
}

2020-10-27 00:56:14 DEBUG PythonASTUtil:73 - Start Char : 132
