2020-10-07 15:33:12 DEBUG PythonASTUtil:36 - Module(body=[FunctionDef],)
2020-10-07 15:33:12 DEBUG PythonASTUtil:55 - Import and Alias Names : {}
2020-10-07 15:33:12 DEBUG PythonASTUtil:65 - FunctionDef
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG TypeStringToJDT:135 - SimpleType was assigned to  : PyTypeError
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Loading statistical mechanics parameters for {0} from {1} file...
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Loading statistical mechanics parameters from {0} file...
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:137 - Key ward is neglected : stream
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - label
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label "{0}" for this species.
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - label
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Did not find label for species {0} in .yml file.
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Subscript]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - label
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - class
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Can only make objects if the `class` attribute in the dictionary is known
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - ArkaneSpecies
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Expected a ArkaneSpecies object, but got {0}
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - class
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - imaginary_frequency
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Name]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - imaginary_frequency
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - imaginary_frequency
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - is_ts
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - smiles
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Subscript]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - species
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - smiles
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:99 - Key ward is neglected : smiles
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - adjacency_list
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Subscript]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - species
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - adjacency_list
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - inchi
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Subscript]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - species
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - inchi
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:99 - Key ward is neglected : inchi
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Attribute]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - species
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - label
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:137 - Key ward is neglected : data
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:137 - Key ward is neglected : class_dict
2020-10-07 15:33:12 DEBUG MapPyStatementsTOJDK:271 - [Attribute]
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:137 - Key ward is neglected : data
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:137 - Key ward is neglected : class_dict
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}
2020-10-07 15:33:12 DEBUG MapPyExpressionsJDK:245 - Parsed all YAML objects
2020-10-07 15:33:12 DEBUG PythonASTUtil:71 - void load_yaml(){
  PyTypeError data;
  PyTypeError class_name;
  PyTypeError freq_data;
  PyTypeError content;
  PyTypeError yml_file;
  PyTypeError freq_data;
  yml_file=os.path.basename(path);
  if (label) {
    logging.info("Loading statistical mechanics parameters for {0} from {1} file...".format(label,yml_file));
  }
 else {
    logging.info("Loading statistical mechanics parameters from {0} file...".format(yml_file));
  }
  content=replace_yaml_syntax(content,label);
  data=yaml.safe_load(content);
  if (label) {
    try {
      if ((label != data["label"])) {
        logging.debug("Found different labels for species: {0} in input file, and {1} in the .yml file. Using the label \"{0}\" for this species.".format(label,data["label"]));
      }
    }
 catch (    KeyError PyCpatDummy) {
      logging.debug("Did not find label for species {0} in .yml file.".format(label));
    }
    data["label"]=label;
  }
  try {
    class_name=data["class"];
  }
 catch (  KeyError PyCpatDummy) {
    throw new KeyError("Can only make objects if the `class` attribute in the dictionary is known");
  }
  if ((class_name != "ArkaneSpecies")) {
    throw new KeyError("Expected a ArkaneSpecies object, but got {0}".format(class_name));
  }
  del(data["class"]);
  freq_data=None;
  if (("imaginary_frequency" in data)) {
    freq_data=data["imaginary_frequency"];
    del(data["imaginary_frequency"]);
  }
  if (!data["is_ts"]) {
    if (("smiles" in data)) {
      data["species"]=Species(data["smiles"]);
    }
 else     if (("adjacency_list" in data)) {
      data["species"]=Species().from_adjacency_list(data["adjacency_list"]);
    }
 else     if (("inchi" in data)) {
      data["species"]=Species(data["inchi"]);
    }
 else {
      throw new ValueError("Cannot load ArkaneSpecies from YAML file {0}. Either `smiles`, `adjacency_list`, or InChI must be specified".format(path));
    }
    data["species"].label=data["label"];
  }
  self.make_object(data,ARKANE_CLASS_DICT);
  if ((freq_data != None)) {
    self.imaginary_frequency=ScalarQuantity();
    self.imaginary_frequency.make_object(freq_data,ARKANE_CLASS_DICT);
  }
  if (pdep && !self.is_ts && (self.smiles == None) && (self.adjacency_list == None) && (self.inchi == None) && (self.molecular_weight == None)) {
    throw new ValueError("The molecular weight was not specified, and a structure was not given so it could not be calculated. Specify either the molecular weight or structure if pressure-dependent calculations are requested. Check file {0}".format(path));
  }
  logging.debug("Parsed all YAML objects");
}

2020-10-07 15:33:12 DEBUG PythonASTUtil:73 - Start Char : 2586
